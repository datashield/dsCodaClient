% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.ilr.R
\name{ds.ilr}
\alias{ds.ilr}
\title{Creates server-side ILR coordinates for compositional data analysis}
\usage{
ds.ilr(X = NULL, V = NULL, objectname = NULL, datasources = NULL)
}
\arguments{
\item{X}{character string specifying the name of the server-side dataset, matrix,
data.frame, or acomp object containing the compositional data.}

\item{V}{an orthonormal basis matrix to be used for the ILR transform. If NULL
(default), the package default basis is used on the server.}

\item{objectname}{character string specifying the name of the new server-side object
which will store the ILR result.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login.
If the \code{datasources} argument is not specified, the default set of connections will be used:
see \code{\link{datashield.connections_default}}.}
}
\value{
\code{ds.ilr} returns (assigns) a server-side object containing the ILR-transformed
coordinates for use in compositional data analysis.
}
\description{
Creates a server-side object containing isometric log-ratio (ILR)
coordinates using the compositions::ilr() function.
}
\details{
This function creates a server-side ILR-transformed object that can be
used for compositional data analysis. It wraps the compositions::ilr() function
for use in DataSHIELD.

Server function called: \code{ilrDS}.
}
\examples{
\dontrun{

  # connecting to the DataSHIELD servers

  require('DSI')
  require('DSOpal')
  require('dsBaseClient')
  require('dsCodaClient')

  builder <- DSI::newDSLoginBuilder()
  builder$append(server = "study1",
                 url = "http://192.168.56.100:8080/",
                 user = "administrator", password = "datashield_test&",
                 table = "COMPOSITIONAL.DATA1", driver = "OpalDriver")
  builder$append(server = "study2",
                 url = "http://192.168.56.100:8080/",
                 user = "administrator", password = "datashield_test&",
                 table = "COMPOSITIONAL.DATA2", driver = "OpalDriver")
  logindata <- builder$build()

  connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")

  # Create a server-side ILR object using default basis
  dsCodaClient::ds.ilr(X = 'D',
                       objectname = 'ilr_object_default',
                       datasources = connections)

  # Create a server-side ILR object using a custom basis matrix V
  # (V must be an orthonormal basis of appropriate dimension)
  V <- diag(4) # example only; replace with a valid ILR basis
  dsCodaClient::ds.ilr(X = 'D',
                       V = V,
                       objectname = 'ilr_object_customV',
                       datasources = connections)

  datashield.logout(connections)
}

}
\author{
DataSHIELD Development Team
}
